#!/usr/bin/env python3

#ebg13 - simple rot13 encoder for the commandline
#cpxn - 25/04/15

import sys
import codecs
import argparse

__author__ = "Capital Seven"
__version_info__ = ('0','1','0')
__version__ = '.'.join(__version_info__)

try:
    
    #create a new ArgumentParser for commandliine options
    parser = argparse.ArgumentParser(prog="ebg",description="Encode text with rot13 cipher.\n"
                                     "If no FILEs specified read from stdin until EOF and print to stdout",
                                     formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("-v","--version", action="version", version="%(prog)s "+__version__)
    parser.add_argument("-t", "--text", default="", help="specify TEXT as input instead of a FILE")
    parser.add_argument("FILE", nargs="*",
                        default=[], help="specify an input or output FILE\n"
                        "(first input, then output FILEs...)\n"
                        "if no input file - can be used to read from stdin")

    #parse commandline args
    args = parser.parse_args()
    
    #read from the text specified as an argument
    if args.text!="":
        text = args.text
        
        output = []
        if len(args.FILE)==0:
            output=[sys.stdout]
            
        for out in args.FILE[:]:
            if out=="-":
                output.append(sys.stdout)
            else:
                output.append( open(out, "w") )
    else:
    #read from the specified file, or stdin
        input = sys.stdin # default
        if len(args.FILE)>0:
            if args.FILE[0]!="-":
                input = open(args.FILE[0], "r")
        
        output = []
        if len(args.FILE)<1:
            output=[sys.stdout]
            
        for out in args.FILE[1:]:
            if out=="-":
                output.append(sys.stdout)
            else:
                output.append(open(out, "w"))
                
        text = input.read()
        
    #encode the text with the rot13 cipher
    encode = codecs.encode(text, "rot13")
    
    #write the encoded text to each output
    for out in output:
        out.write(encode)

except KeyboardInterrupt as err:
    #drop out if we receive a KeyboardInterruptSignal
    print ( "KeyboardInterrupt" )

